#lang racket
(require racket/match)

(provide (all-defined-out))

(define ITEMS 5)

;; Actualizăm structura counter cu informația et:
;; Exit time (et) al unei case reprezintă timpul până la ieșirea primului client de la casa respectivă,
;; adică numărul de produse de procesat pentru acest client + întârzierile suferite de casă (dacă există).
;; Ex:
;; la C3 s-au așezat întâi Ana cu 3 produse și apoi Geo cu 7 produse,
;; și C3 a fost întârziată cu 5 minute => et pentru C3 este 3 + 5 = 8 (timpul până când va ieși Ana).


; Redefinim structura counter.
(define-struct counter (index tt et queue) #:transparent)


; TODO
; Actualizați implementarea empty-counter astfel încât să conțină și câmpul et.
(define (empty-counter index)
  (make-counter index 0 0 '()))


; TODO
; Implementați o funcție care aplică o transformare casei cu un anumit index.
; f = funcție unară care se aplică pe un argument de tip casă, counters = listă de case,
; index = indexul casei din counters căreia îi veți aplica transformarea f
; Veți întoarce lista actualizată de case.
; Dacă nu există în counters o casă cu acest index, veți întoarce lista nemodificată.
(define (update f counters index)
  (foldl (λ (x aux)
           (if (equal? (match x [(counter index tt et queue) index]) index)
               (append aux (list (f x)))
               (append aux (list x))))
                  '()
                  counters))


; TODO
; Memento: tt+ crește tt-ul unei case cu un număr dat de minute.
; Actualizați implementarea tt+ pentru:
; - a ține cont de noua reprezentare a unei case
; - a permite ca operații de tip tt+ să fie pasate ca argument funcției update în cel mai facil mod
; Obs: Pentru compatibilitatea cu primul argument al lui update, trebuie să obținem ușor din tt+ 
; o funcție unară care se aplică pe un argument de tip casă (v. funcții curry).
; Am eliminat parametrii lui tt+ din define-ul de mai jos astfel încât voi să determinați
; cum este cel mai bine ca tt+ să își primească parametrii.
; Din acest motiv checker-ul nu testează separat această funcție, dar asistentul va verifica
; faptul că ați implementat-o conform cerințelor.
(define (tt+ C minutes)
  (match C
    [(counter index tt et queue)
     (struct-copy counter C [tt (+ (match C [(counter index tt et queue) tt]) minutes)])]))


; TODO
; Implementați o funcție care crește et-ul unei case cu un număr dat de minute.
; Păstrați formatul folosit pentru tt+.
; Checker-ul nu testează separat această funcție.
(define (et+ C minutes)
  (match C
    [(counter index tt et queue)
     (struct-copy counter C [et (+ (match C [(counter index tt et queue) et]) minutes)])]))


; TODO
; Memento: add-to-counter adaugă o persoană (reprezentată prin nume și număr de produse) la o casă. 
; Actualizați implementarea add-to-counter pentru aceleași rațiuni pentru care am modificat tt+.
; Atenție la cum se modifică tt și et!
; Checker-ul nu testează separat această funcție.
(define (add-to-counter C name n-items)
  (if (null? (match C [(counter index tt et queue) queue]))
      (struct-copy counter C  [tt (+(match C [(counter index tt et queue) tt]) n-items)]
               [et (+(match C [(counter index tt et queue) et]) n-items)]    
               [queue (append (match C [(counter index tt et queue) queue]) (list (cons name n-items)))])
      (struct-copy counter C  [tt (+(match C [(counter index tt et queue) tt]) n-items)]
               [queue (append (match C [(counter index tt et queue) queue]) (list (cons name n-items)))])))


; TODO
; Întrucât vom folosi atât min-tt (implementat în etapa 1) cât și min-et (funcție nouă),
; definiți-vă o funcție mai abstractă din care să derive ușor atât min-tt cât și min-et.
; Prin analogie cu min-tt, definim min-et astfel:
; min-et = funcție care primește o listă de case și intoarce o pereche dintre:
; - indexul casei (din listă) care are cel mai mic et
; - et-ul acesteia
; (când mai multe case au același et, este preferată casa cu indexul cel mai mic)
(define (afla-tt c)
  (match c [(counter index tt et queue) tt]))

(define (afla-et c)
  (match c [(counter index tt et queue) et]))

(define (create-pereche c functie)
  (cons (match c [(counter index tt et queue) index]) (functie c)))

(define (findMin functie)
  (lambda (counters)
    (findMin-helper functie counters (cons 0 1000))))

(define (findMin-helper functie counters pereche)
  (cond
    ((null? counters) pereche)
    ((< (functie (car counters)) (cdr pereche)) (findMin-helper functie (cdr counters) (create-pereche (car counters) functie)))
    ((and (= (functie (car counters)) (cdr pereche)) (< (match (car counters) [(counter index tt et queue) index]) (car pereche))) (findMin-helper functie (cdr counters) (create-pereche (car counters) functie)))
    (else (findMin-helper functie (cdr counters) pereche))))
    
    

(define min-tt (findMin afla-tt)) ; folosind funcția de mai sus
(define min-et (findMin afla-et)) ; folosind funcția de mai sus


; TODO
; Implementați o funcție care scoate prima persoană din coada unei case.
; Funcția presupune, fără să verifice, că există minim o persoană la coada casei C.
; Veți întoarce o nouă structură obținută prin modificarea cozii de așteptare.
; Atenție la cum se modifică tt și et!
; Dacă o casă tocmai a fost părăsită de cineva, înseamnă că ea nu mai are întârzieri.
(define (nou-et C)
  (cond
    ((null? (match C [(counter index tt et queue) queue])) (match C [(counter index tt et queue) et]))
    ((null? (cdr (match C [(counter index tt et queue) queue]))) 0)
    (else  (cdr (car (cdr (match C [(counter index tt et queue) queue])))))))
      

(define (remove-first-from-counter C)
  (if (null? (match C [(counter index tt et queue) queue]))
      (struct-copy counter C)
      
      (struct-copy counter C [tt (-(match C [(counter index tt et queue) tt]) (match C [(counter index tt et queue) et]) )]
                   [et (nou-et C)]
                   [queue (cdr (match C [(counter index tt et queue) queue]))]
                   )))

; TODO
; Implementați funcția care simulează fluxul clienților pe la case.
; ATENȚIE: Față de etapa 1, funcția serve operează cu următoarele modificări:
; - nu mai avem doar 4 case, ci:
;   - fast-counters (o listă de case pentru maxim ITEMS produse)
;   - slow-counters (o listă de case fără restricții)
;   (Sugestie: folosiți funcția update pentru a obține comportamentul pe liste de case)
; - requests conține 4 tipuri de cereri (cele 2 din etapa anterioară plus 2 noi):
;   - (<name> <n-items>) - persoana <name> trebuie așezată la coadă la o casă
;   - (delay <index> <minutes>) - casa <index> este întârziată cu <minutes> minute
;   - (remove-first) - cea mai avansată persoană părăsește casa la care se află
;   - (ensure <average>) - cât timp tt-ul mediu al tuturor caselor este mai mare decât
;                          <average>, se adaugă case fără restricții (case slow)
; Sistemul trebuie să proceseze cele 4 tipuri de cereri în ordine, astfel:
; - persoanele vor fi distribuite la casele cu tt minim (dintre casele la care au voie)
;   (ca înainte, dar acum folosiți fast-counters și slow-counters)
; - când o casă suferă o întârziere, tt-ul și et-ul ei cresc (chiar dacă nu are clienți)
;   (puțin diferit față de etapa 1, și acum folosiți fast-counters și slow-counters)
; - persoana care părăsește supermarketul este persoana fruntașă la casa cu et-ul minim
;   (dintre casele care au clienți); dacă nicio casă nu are clienți, cererea e ignorată
; - tt-ul mediu (ttmed) se calculează pentru toate casele (și cele fast, și cele slow), 
;   iar la nevoie veți adăuga case slow una câte una, până când ttmed <= <average>
; Considerați că indecșii caselor încep de la 1 și sunt mereu în ordine.
; Ex:
; fast-counters conține casele 1-2, slow-counters conține casele 3-15
; => la nevoie veți adăuga întâi casa 16, apoi casa 17, etc.
; (puteți determina matematic de câte case noi este nevoie sau
;  puteți adăuga recursiv una câte una până când condiția este îndeplinită)
(define (serve requests fast-counters slow-counters)

  (if (null? requests)
      (append fast-counters slow-counters)
      (match (car requests)
        [(list 'ensure <average>) (serve (cdr requests) fast-counters (deschid-case (car requests) fast-counters slow-counters))]
        [(list name n-items) (serve (cdr requests) (car (addToCounter (car requests) fast-counters slow-counters)) (car (cdr (addToCounter (car requests) fast-counters slow-counters))))]
        [(list 'delay <index> <minutes>) (serve (cdr requests) (delay (car requests) fast-counters) (delay (car requests) slow-counters))]
        [(list 'remove-first) (serve (cdr requests) (car (actualizare-remove-first fast-counters slow-counters)) (car(cdr (actualizare-remove-first fast-counters slow-counters))))]
        )))


;Pt Adaugarea unui client (<name> <n-items>)
;-----------------------------------------------------------------------------------------------
(define (addToCounter cerere fast-counters slow-counters)
  (if (and (<= (car (cdr cerere)) ITEMS) (<= (cdr (min-tt fast-counters)) (cdr (min-tt slow-counters))))
      (list (actualizare-add (min-tt fast-counters) cerere fast-counters ) slow-counters)
      (list fast-counters (actualizare-add (min-tt slow-counters) cerere slow-counters ))))


(define (actualizare-add pereche cerere lista-case)
  (foldl (λ (x aux)
           (if (= (match x [(counter index tt et queue) index]) (car pereche))
               (append aux (list (add-to-counter x (car cerere) (car (cdr cerere)))))
               (append aux (list x))))
                  '()
                 lista-case))
;------------------------------------------------------------------------------------------------


;Pt Intarzierea unei case (delay <index> <minutes>)
;------------------------------------------------------------------------------------------------
(define (delay cerere lista-case)
  (foldl (λ (x aux)
           (if (= (match x [(counter index tt et queue) index]) (car (cdr cerere)))
               (append aux (list (intarziere x (car (cdr (cdr cerere))))))
               (append aux (list x))))
                  '()
                  lista-case))

(define (intarziere casa minute)
   (tt+ (et+ casa minute) minute))
;-----------------------------------------------------------------------------------------------
  

;Pt remove first
;------------------------------------------------------------------------------------------------

(define (eliminare_case_goale lista-case)
  (foldl (λ (x aux)
           (if (not (null? (match x [(counter index tt et queue) queue])))
               (append aux x)
               (append aux '())))
                  '()
                  lista-case))

(define (actualizare-remove-first fast-counters slow-counters)
  (if (<= (cdr (min-et (eliminare_case_goale fast-counters))) (cdr (min-et (eliminare_case_goale slow-counters))))
      (list (remove-first-from-list fast-counters (min-et (eliminare_case_goale fast-counters)) '()) slow-counters)
      (list fast-counters (remove-first-from-list slow-counters (min-et (eliminare_case_goale slow-counters)) '()))))

(define (remove-first-from-list lista-case pereche aux)
  (cond
    ((equal? (car pereche) 0) lista-case)
    ((null? lista-case) aux)
    ((= (match (car lista-case) [(counter index tt et queue) index]) (car pereche)) (remove-first-from-list (cdr lista-case) pereche (append aux (list (remove-first-from-counter (car lista-case))))))
    (else (remove-first-from-list (cdr lista-case) pereche (append aux (list (car lista-case)))))))

;------------------------------------------------------------------------------------------------


;Pt (ensure <average>)
;------------------------------------------------------------------------------------------------
(define (deschid-case cerere fast-counters slow-counters)
  (if (<= (calcul-medie (append fast-counters slow-counters) 0 (length (append fast-counters slow-counters))) (car (cdr cerere)))
      slow-counters
      (deschid-case cerere fast-counters (append slow-counters (list (empty-counter (+ 1 (length (append fast-counters slow-counters)))))))))

(define (calcul-medie lista tt-total sizeInit)
  (if (null? lista)
      (/ tt-total sizeInit)
      (calcul-medie (cdr lista) (+ tt-total (match (car lista) [(counter index tt et queue) tt])) sizeInit)))
;------------------------------------------------------------------------------------------------


















 
  

